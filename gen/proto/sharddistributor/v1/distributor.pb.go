// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: sharddistributor/v1/distributor.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShardAssignmentAction int32

const (
	ShardAssignmentAction_SHARD_ASSIGNMENT_ACTION_INVALID      ShardAssignmentAction = 0
	ShardAssignmentAction_SHARD_ASSIGNMENT_ACTION_PREPARE_ADD  ShardAssignmentAction = 1 // Assign shard to instance
	ShardAssignmentAction_SHARD_ASSIGNMENT_ACTION_PREPARE_DROP ShardAssignmentAction = 2 // Prepare instance for fast activation
	ShardAssignmentAction_SHARD_ASSIGNMENT_ACTION_ADD          ShardAssignmentAction = 3 // Revoke shard from instance
	ShardAssignmentAction_SHARD_ASSIGNMENT_ACTION_DROP         ShardAssignmentAction = 4
)

// Enum value maps for ShardAssignmentAction.
var (
	ShardAssignmentAction_name = map[int32]string{
		0: "SHARD_ASSIGNMENT_ACTION_INVALID",
		1: "SHARD_ASSIGNMENT_ACTION_PREPARE_ADD",
		2: "SHARD_ASSIGNMENT_ACTION_PREPARE_DROP",
		3: "SHARD_ASSIGNMENT_ACTION_ADD",
		4: "SHARD_ASSIGNMENT_ACTION_DROP",
	}
	ShardAssignmentAction_value = map[string]int32{
		"SHARD_ASSIGNMENT_ACTION_INVALID":      0,
		"SHARD_ASSIGNMENT_ACTION_PREPARE_ADD":  1,
		"SHARD_ASSIGNMENT_ACTION_PREPARE_DROP": 2,
		"SHARD_ASSIGNMENT_ACTION_ADD":          3,
		"SHARD_ASSIGNMENT_ACTION_DROP":         4,
	}
)

func (x ShardAssignmentAction) Enum() *ShardAssignmentAction {
	p := new(ShardAssignmentAction)
	*p = x
	return p
}

func (x ShardAssignmentAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardAssignmentAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sharddistributor_v1_distributor_proto_enumTypes[0].Descriptor()
}

func (ShardAssignmentAction) Type() protoreflect.EnumType {
	return &file_sharddistributor_v1_distributor_proto_enumTypes[0]
}

func (x ShardAssignmentAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardAssignmentAction.Descriptor instead.
func (ShardAssignmentAction) EnumDescriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{0}
}

type ShardDistributorStreamRequest_MessageType int32

const (
	ShardDistributorStreamRequest_MESSAGE_TYPE_INVALID       ShardDistributorStreamRequest_MessageType = 0
	ShardDistributorStreamRequest_MESSAGE_TYPE_HEARTBEAT     ShardDistributorStreamRequest_MessageType = 1 // HEARTBEAT instance
	ShardDistributorStreamRequest_MESSAGE_TYPE_STOPPING      ShardDistributorStreamRequest_MessageType = 2 // Deregister instance
	ShardDistributorStreamRequest_MESSAGE_TYPE_WATCH         ShardDistributorStreamRequest_MessageType = 3 // Start watching for shard assignments
	ShardDistributorStreamRequest_MESSAGE_TYPE_ACK           ShardDistributorStreamRequest_MessageType = 4 // Acknowledge assignment
	ShardDistributorStreamRequest_MESSAGE_TYPE_STATUS_REPORT ShardDistributorStreamRequest_MessageType = 5 // Report instance status
)

// Enum value maps for ShardDistributorStreamRequest_MessageType.
var (
	ShardDistributorStreamRequest_MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_INVALID",
		1: "MESSAGE_TYPE_HEARTBEAT",
		2: "MESSAGE_TYPE_STOPPING",
		3: "MESSAGE_TYPE_WATCH",
		4: "MESSAGE_TYPE_ACK",
		5: "MESSAGE_TYPE_STATUS_REPORT",
	}
	ShardDistributorStreamRequest_MessageType_value = map[string]int32{
		"MESSAGE_TYPE_INVALID":       0,
		"MESSAGE_TYPE_HEARTBEAT":     1,
		"MESSAGE_TYPE_STOPPING":      2,
		"MESSAGE_TYPE_WATCH":         3,
		"MESSAGE_TYPE_ACK":           4,
		"MESSAGE_TYPE_STATUS_REPORT": 5,
	}
)

func (x ShardDistributorStreamRequest_MessageType) Enum() *ShardDistributorStreamRequest_MessageType {
	p := new(ShardDistributorStreamRequest_MessageType)
	*p = x
	return p
}

func (x ShardDistributorStreamRequest_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardDistributorStreamRequest_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharddistributor_v1_distributor_proto_enumTypes[1].Descriptor()
}

func (ShardDistributorStreamRequest_MessageType) Type() protoreflect.EnumType {
	return &file_sharddistributor_v1_distributor_proto_enumTypes[1]
}

func (x ShardDistributorStreamRequest_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardDistributorStreamRequest_MessageType.Descriptor instead.
func (ShardDistributorStreamRequest_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{0, 0}
}

type ShardDistributorStreamResponse_MessageType int32

const (
	ShardDistributorStreamResponse_MESSAGE_TYPE_INVALID           ShardDistributorStreamResponse_MessageType = 0
	ShardDistributorStreamResponse_MESSAGE_TYPE_REGISTER_RESPONSE ShardDistributorStreamResponse_MessageType = 1 // Response to registration
	ShardDistributorStreamResponse_MESSAGE_TYPE_SHARD_ASSIGNMENT  ShardDistributorStreamResponse_MessageType = 2 // Shard assignment/revocation
	ShardDistributorStreamResponse_MESSAGE_TYPE_STATUS_RESPONSE   ShardDistributorStreamResponse_MessageType = 3 // Response to status report
	ShardDistributorStreamResponse_MESSAGE_TYPE_HEARTBEAT_ACK     ShardDistributorStreamResponse_MessageType = 4 // Acknowledge heartbeat
)

// Enum value maps for ShardDistributorStreamResponse_MessageType.
var (
	ShardDistributorStreamResponse_MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_INVALID",
		1: "MESSAGE_TYPE_REGISTER_RESPONSE",
		2: "MESSAGE_TYPE_SHARD_ASSIGNMENT",
		3: "MESSAGE_TYPE_STATUS_RESPONSE",
		4: "MESSAGE_TYPE_HEARTBEAT_ACK",
	}
	ShardDistributorStreamResponse_MessageType_value = map[string]int32{
		"MESSAGE_TYPE_INVALID":           0,
		"MESSAGE_TYPE_REGISTER_RESPONSE": 1,
		"MESSAGE_TYPE_SHARD_ASSIGNMENT":  2,
		"MESSAGE_TYPE_STATUS_RESPONSE":   3,
		"MESSAGE_TYPE_HEARTBEAT_ACK":     4,
	}
)

func (x ShardDistributorStreamResponse_MessageType) Enum() *ShardDistributorStreamResponse_MessageType {
	p := new(ShardDistributorStreamResponse_MessageType)
	*p = x
	return p
}

func (x ShardDistributorStreamResponse_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardDistributorStreamResponse_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharddistributor_v1_distributor_proto_enumTypes[2].Descriptor()
}

func (ShardDistributorStreamResponse_MessageType) Type() protoreflect.EnumType {
	return &file_sharddistributor_v1_distributor_proto_enumTypes[2]
}

func (x ShardDistributorStreamResponse_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardDistributorStreamResponse_MessageType.Descriptor instead.
func (ShardDistributorStreamResponse_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{1, 0}
}

type StatusReport_Status int32

const (
	StatusReport_STATUS_INVALID  StatusReport_Status = 0
	StatusReport_STATUS_ACTIVE   StatusReport_Status = 1
	StatusReport_STATUS_DRAINING StatusReport_Status = 2
)

// Enum value maps for StatusReport_Status.
var (
	StatusReport_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "STATUS_ACTIVE",
		2: "STATUS_DRAINING",
	}
	StatusReport_Status_value = map[string]int32{
		"STATUS_INVALID":  0,
		"STATUS_ACTIVE":   1,
		"STATUS_DRAINING": 2,
	}
)

func (x StatusReport_Status) Enum() *StatusReport_Status {
	p := new(StatusReport_Status)
	*p = x
	return p
}

func (x StatusReport_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusReport_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sharddistributor_v1_distributor_proto_enumTypes[3].Descriptor()
}

func (StatusReport_Status) Type() protoreflect.EnumType {
	return &file_sharddistributor_v1_distributor_proto_enumTypes[3]
}

func (x StatusReport_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusReport_Status.Descriptor instead.
func (StatusReport_Status) EnumDescriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{3, 0}
}

// ClientMessage encapsulates all possible messages from client to server
type ShardDistributorStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                                    `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Type       ShardDistributorStreamRequest_MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=sharddistributor.v1.ShardDistributorStreamRequest_MessageType" json:"type,omitempty"`
	Namespace  string                                    `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Fields based on message type
	InstanceInfo *InstanceInfo     `protobuf:"bytes,4,opt,name=instance_info,json=instanceInfo,proto3" json:"instance_info,omitempty"`                                                             // For REGISTER
	Status       *StatusReport     `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                                                                             // For STATUS_REPORT
	ShardId      string            `protobuf:"bytes,6,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`                                                                            // For ACK
	Metadata     map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional metadata
}

func (x *ShardDistributorStreamRequest) Reset() {
	*x = ShardDistributorStreamRequest{}
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardDistributorStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardDistributorStreamRequest) ProtoMessage() {}

func (x *ShardDistributorStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardDistributorStreamRequest.ProtoReflect.Descriptor instead.
func (*ShardDistributorStreamRequest) Descriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{0}
}

func (x *ShardDistributorStreamRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ShardDistributorStreamRequest) GetType() ShardDistributorStreamRequest_MessageType {
	if x != nil {
		return x.Type
	}
	return ShardDistributorStreamRequest_MESSAGE_TYPE_INVALID
}

func (x *ShardDistributorStreamRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ShardDistributorStreamRequest) GetInstanceInfo() *InstanceInfo {
	if x != nil {
		return x.InstanceInfo
	}
	return nil
}

func (x *ShardDistributorStreamRequest) GetStatus() *StatusReport {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShardDistributorStreamRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ShardDistributorStreamRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ServerMessage encapsulates all possible messages from server to client
type ShardDistributorStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ShardDistributorStreamResponse_MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=sharddistributor.v1.ShardDistributorStreamResponse_MessageType" json:"type,omitempty"`
	Namespace string                                     `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Fields for REGISTER_RESPONSE
	Success        bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message        string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	AssignedShards []string `protobuf:"bytes,6,rep,name=assigned_shards,json=assignedShards,proto3" json:"assigned_shards,omitempty"`
	// Fields for SHARD_ASSIGNMENT
	ShardId          string                `protobuf:"bytes,7,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Action           ShardAssignmentAction `protobuf:"varint,8,opt,name=action,proto3,enum=sharddistributor.v1.ShardAssignmentAction" json:"action,omitempty"`
	SourceInstanceId string                `protobuf:"bytes,10,opt,name=source_instance_id,json=sourceInstanceId,proto3" json:"source_instance_id,omitempty"`
}

func (x *ShardDistributorStreamResponse) Reset() {
	*x = ShardDistributorStreamResponse{}
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardDistributorStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardDistributorStreamResponse) ProtoMessage() {}

func (x *ShardDistributorStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardDistributorStreamResponse.ProtoReflect.Descriptor instead.
func (*ShardDistributorStreamResponse) Descriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{1}
}

func (x *ShardDistributorStreamResponse) GetType() ShardDistributorStreamResponse_MessageType {
	if x != nil {
		return x.Type
	}
	return ShardDistributorStreamResponse_MESSAGE_TYPE_INVALID
}

func (x *ShardDistributorStreamResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ShardDistributorStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ShardDistributorStreamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ShardDistributorStreamResponse) GetAssignedShards() []string {
	if x != nil {
		return x.AssignedShards
	}
	return nil
}

func (x *ShardDistributorStreamResponse) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ShardDistributorStreamResponse) GetAction() ShardAssignmentAction {
	if x != nil {
		return x.Action
	}
	return ShardAssignmentAction_SHARD_ASSIGNMENT_ACTION_INVALID
}

func (x *ShardDistributorStreamResponse) GetSourceInstanceId() string {
	if x != nil {
		return x.SourceInstanceId
	}
	return ""
}

// Keep these for backward compatibility or reference
type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{2}
}

func (x *InstanceInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type StatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string              `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Status     StatusReport_Status `protobuf:"varint,2,opt,name=status,proto3,enum=sharddistributor.v1.StatusReport_Status" json:"status,omitempty"`
	Namespaces []string            `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Metadata   map[string]string   `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatusReport) Reset() {
	*x = StatusReport{}
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport) ProtoMessage() {}

func (x *StatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_sharddistributor_v1_distributor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport.ProtoReflect.Descriptor instead.
func (*StatusReport) Descriptor() ([]byte, []int) {
	return file_sharddistributor_v1_distributor_proto_rawDescGZIP(), []int{3}
}

func (x *StatusReport) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StatusReport) GetStatus() StatusReport_Status {
	if x != nil {
		return x.Status
	}
	return StatusReport_STATUS_INVALID
}

func (x *StatusReport) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *StatusReport) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_sharddistributor_v1_distributor_proto protoreflect.FileDescriptor

var file_sharddistributor_v1_distributor_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x9a, 0x05, 0x0a,
	0x1d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x22, 0xb0, 0x04, 0x0a, 0x1e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x22, 0x2f, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe1, 0x02,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x2a, 0xd2, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x48, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x48, 0x41,
	0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x04, 0x32, 0xa3, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x76, 0x69, 0x6c, 0x68,
	0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x65, 0x74,
	0x63, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sharddistributor_v1_distributor_proto_rawDescOnce sync.Once
	file_sharddistributor_v1_distributor_proto_rawDescData = file_sharddistributor_v1_distributor_proto_rawDesc
)

func file_sharddistributor_v1_distributor_proto_rawDescGZIP() []byte {
	file_sharddistributor_v1_distributor_proto_rawDescOnce.Do(func() {
		file_sharddistributor_v1_distributor_proto_rawDescData = protoimpl.X.CompressGZIP(file_sharddistributor_v1_distributor_proto_rawDescData)
	})
	return file_sharddistributor_v1_distributor_proto_rawDescData
}

var file_sharddistributor_v1_distributor_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sharddistributor_v1_distributor_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sharddistributor_v1_distributor_proto_goTypes = []any{
	(ShardAssignmentAction)(0),                      // 0: sharddistributor.v1.ShardAssignmentAction
	(ShardDistributorStreamRequest_MessageType)(0),  // 1: sharddistributor.v1.ShardDistributorStreamRequest.MessageType
	(ShardDistributorStreamResponse_MessageType)(0), // 2: sharddistributor.v1.ShardDistributorStreamResponse.MessageType
	(StatusReport_Status)(0),                        // 3: sharddistributor.v1.StatusReport.Status
	(*ShardDistributorStreamRequest)(nil),           // 4: sharddistributor.v1.ShardDistributorStreamRequest
	(*ShardDistributorStreamResponse)(nil),          // 5: sharddistributor.v1.ShardDistributorStreamResponse
	(*InstanceInfo)(nil),                            // 6: sharddistributor.v1.InstanceInfo
	(*StatusReport)(nil),                            // 7: sharddistributor.v1.StatusReport
	nil,                                             // 8: sharddistributor.v1.ShardDistributorStreamRequest.MetadataEntry
	nil,                                             // 9: sharddistributor.v1.StatusReport.MetadataEntry
}
var file_sharddistributor_v1_distributor_proto_depIdxs = []int32{
	1, // 0: sharddistributor.v1.ShardDistributorStreamRequest.type:type_name -> sharddistributor.v1.ShardDistributorStreamRequest.MessageType
	6, // 1: sharddistributor.v1.ShardDistributorStreamRequest.instance_info:type_name -> sharddistributor.v1.InstanceInfo
	7, // 2: sharddistributor.v1.ShardDistributorStreamRequest.status:type_name -> sharddistributor.v1.StatusReport
	8, // 3: sharddistributor.v1.ShardDistributorStreamRequest.metadata:type_name -> sharddistributor.v1.ShardDistributorStreamRequest.MetadataEntry
	2, // 4: sharddistributor.v1.ShardDistributorStreamResponse.type:type_name -> sharddistributor.v1.ShardDistributorStreamResponse.MessageType
	0, // 5: sharddistributor.v1.ShardDistributorStreamResponse.action:type_name -> sharddistributor.v1.ShardAssignmentAction
	3, // 6: sharddistributor.v1.StatusReport.status:type_name -> sharddistributor.v1.StatusReport.Status
	9, // 7: sharddistributor.v1.StatusReport.metadata:type_name -> sharddistributor.v1.StatusReport.MetadataEntry
	4, // 8: sharddistributor.v1.ShardDistributorService.ShardDistributorStream:input_type -> sharddistributor.v1.ShardDistributorStreamRequest
	5, // 9: sharddistributor.v1.ShardDistributorService.ShardDistributorStream:output_type -> sharddistributor.v1.ShardDistributorStreamResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sharddistributor_v1_distributor_proto_init() }
func file_sharddistributor_v1_distributor_proto_init() {
	if File_sharddistributor_v1_distributor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sharddistributor_v1_distributor_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sharddistributor_v1_distributor_proto_goTypes,
		DependencyIndexes: file_sharddistributor_v1_distributor_proto_depIdxs,
		EnumInfos:         file_sharddistributor_v1_distributor_proto_enumTypes,
		MessageInfos:      file_sharddistributor_v1_distributor_proto_msgTypes,
	}.Build()
	File_sharddistributor_v1_distributor_proto = out.File
	file_sharddistributor_v1_distributor_proto_rawDesc = nil
	file_sharddistributor_v1_distributor_proto_goTypes = nil
	file_sharddistributor_v1_distributor_proto_depIdxs = nil
}

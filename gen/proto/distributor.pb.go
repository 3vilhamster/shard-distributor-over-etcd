// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: distributor.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShardAssignmentAction int32

const (
	ShardAssignmentAction_ASSIGN    ShardAssignmentAction = 0 // Assign shard to instance
	ShardAssignmentAction_PREPARE   ShardAssignmentAction = 1 // Prepare instance for fast activation
	ShardAssignmentAction_REVOKE    ShardAssignmentAction = 2 // Revoke shard from instance
	ShardAssignmentAction_RECONCILE ShardAssignmentAction = 3 // Reconciliation action
)

// Enum value maps for ShardAssignmentAction.
var (
	ShardAssignmentAction_name = map[int32]string{
		0: "ASSIGN",
		1: "PREPARE",
		2: "REVOKE",
		3: "RECONCILE",
	}
	ShardAssignmentAction_value = map[string]int32{
		"ASSIGN":    0,
		"PREPARE":   1,
		"REVOKE":    2,
		"RECONCILE": 3,
	}
)

func (x ShardAssignmentAction) Enum() *ShardAssignmentAction {
	p := new(ShardAssignmentAction)
	*p = x
	return p
}

func (x ShardAssignmentAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardAssignmentAction) Descriptor() protoreflect.EnumDescriptor {
	return file_distributor_proto_enumTypes[0].Descriptor()
}

func (ShardAssignmentAction) Type() protoreflect.EnumType {
	return &file_distributor_proto_enumTypes[0]
}

func (x ShardAssignmentAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardAssignmentAction.Descriptor instead.
func (ShardAssignmentAction) EnumDescriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{0}
}

type ClientMessage_MessageType int32

const (
	ClientMessage_REGISTER      ClientMessage_MessageType = 0 // Register instance
	ClientMessage_DEREGISTER    ClientMessage_MessageType = 1 // Deregister instance
	ClientMessage_WATCH         ClientMessage_MessageType = 2 // Start watching for shard assignments
	ClientMessage_HEARTBEAT     ClientMessage_MessageType = 3 // Heartbeat ping
	ClientMessage_ACK           ClientMessage_MessageType = 4 // Acknowledge assignment
	ClientMessage_STATUS_REPORT ClientMessage_MessageType = 5 // Report instance status
)

// Enum value maps for ClientMessage_MessageType.
var (
	ClientMessage_MessageType_name = map[int32]string{
		0: "REGISTER",
		1: "DEREGISTER",
		2: "WATCH",
		3: "HEARTBEAT",
		4: "ACK",
		5: "STATUS_REPORT",
	}
	ClientMessage_MessageType_value = map[string]int32{
		"REGISTER":      0,
		"DEREGISTER":    1,
		"WATCH":         2,
		"HEARTBEAT":     3,
		"ACK":           4,
		"STATUS_REPORT": 5,
	}
)

func (x ClientMessage_MessageType) Enum() *ClientMessage_MessageType {
	p := new(ClientMessage_MessageType)
	*p = x
	return p
}

func (x ClientMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_distributor_proto_enumTypes[1].Descriptor()
}

func (ClientMessage_MessageType) Type() protoreflect.EnumType {
	return &file_distributor_proto_enumTypes[1]
}

func (x ClientMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientMessage_MessageType.Descriptor instead.
func (ClientMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{0, 0}
}

type ServerMessage_MessageType int32

const (
	ServerMessage_REGISTER_RESPONSE   ServerMessage_MessageType = 0 // Response to registration
	ServerMessage_DEREGISTER_RESPONSE ServerMessage_MessageType = 1 // Response to deregistration
	ServerMessage_SHARD_ASSIGNMENT    ServerMessage_MessageType = 2 // Shard assignment/revocation
	ServerMessage_STATUS_RESPONSE     ServerMessage_MessageType = 3 // Response to status report
	ServerMessage_HEARTBEAT_ACK       ServerMessage_MessageType = 4 // Acknowledge heartbeat
)

// Enum value maps for ServerMessage_MessageType.
var (
	ServerMessage_MessageType_name = map[int32]string{
		0: "REGISTER_RESPONSE",
		1: "DEREGISTER_RESPONSE",
		2: "SHARD_ASSIGNMENT",
		3: "STATUS_RESPONSE",
		4: "HEARTBEAT_ACK",
	}
	ServerMessage_MessageType_value = map[string]int32{
		"REGISTER_RESPONSE":   0,
		"DEREGISTER_RESPONSE": 1,
		"SHARD_ASSIGNMENT":    2,
		"STATUS_RESPONSE":     3,
		"HEARTBEAT_ACK":       4,
	}
)

func (x ServerMessage_MessageType) Enum() *ServerMessage_MessageType {
	p := new(ServerMessage_MessageType)
	*p = x
	return p
}

func (x ServerMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_distributor_proto_enumTypes[2].Descriptor()
}

func (ServerMessage_MessageType) Type() protoreflect.EnumType {
	return &file_distributor_proto_enumTypes[2]
}

func (x ServerMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerMessage_MessageType.Descriptor instead.
func (ServerMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{1, 0}
}

type StatusReport_Status int32

const (
	StatusReport_ACTIVE     StatusReport_Status = 0
	StatusReport_DRAINING   StatusReport_Status = 1
	StatusReport_OVERLOADED StatusReport_Status = 2
)

// Enum value maps for StatusReport_Status.
var (
	StatusReport_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "DRAINING",
		2: "OVERLOADED",
	}
	StatusReport_Status_value = map[string]int32{
		"ACTIVE":     0,
		"DRAINING":   1,
		"OVERLOADED": 2,
	}
)

func (x StatusReport_Status) Enum() *StatusReport_Status {
	p := new(StatusReport_Status)
	*p = x
	return p
}

func (x StatusReport_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusReport_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_distributor_proto_enumTypes[3].Descriptor()
}

func (StatusReport_Status) Type() protoreflect.EnumType {
	return &file_distributor_proto_enumTypes[3]
}

func (x StatusReport_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusReport_Status.Descriptor instead.
func (StatusReport_Status) EnumDescriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{3, 0}
}

// ClientMessage encapsulates all possible messages from client to server
type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                    `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Type       ClientMessage_MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=sharddistributor.ClientMessage_MessageType" json:"type,omitempty"`
	// Fields based on message type
	InstanceInfo *InstanceInfo     `protobuf:"bytes,3,opt,name=instance_info,json=instanceInfo,proto3" json:"instance_info,omitempty"`                                                             // For REGISTER
	Status       *StatusReport     `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                                                             // For STATUS_REPORT
	ShardId      string            `protobuf:"bytes,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`                                                                            // For ACK
	Metadata     map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional metadata
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	mi := &file_distributor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ClientMessage) GetType() ClientMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ClientMessage_REGISTER
}

func (x *ClientMessage) GetInstanceInfo() *InstanceInfo {
	if x != nil {
		return x.InstanceInfo
	}
	return nil
}

func (x *ClientMessage) GetStatus() *StatusReport {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClientMessage) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ClientMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ServerMessage encapsulates all possible messages from server to client
type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ServerMessage_MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=sharddistributor.ServerMessage_MessageType" json:"type,omitempty"`
	// Fields for REGISTER_RESPONSE
	Success        bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message        string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	LeaseId        int64    `protobuf:"varint,5,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	AssignedShards []string `protobuf:"bytes,6,rep,name=assigned_shards,json=assignedShards,proto3" json:"assigned_shards,omitempty"`
	// Fields for SHARD_ASSIGNMENT
	ShardId          string                `protobuf:"bytes,7,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Action           ShardAssignmentAction `protobuf:"varint,8,opt,name=action,proto3,enum=sharddistributor.ShardAssignmentAction" json:"action,omitempty"`
	Priority         int32                 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	SourceInstanceId string                `protobuf:"bytes,10,opt,name=source_instance_id,json=sourceInstanceId,proto3" json:"source_instance_id,omitempty"`
	Version          int64                 `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	IsReconciliation bool                  `protobuf:"varint,12,opt,name=is_reconciliation,json=isReconciliation,proto3" json:"is_reconciliation,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_distributor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMessage) GetType() ServerMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ServerMessage_REGISTER_RESPONSE
}

func (x *ServerMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServerMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServerMessage) GetLeaseId() int64 {
	if x != nil {
		return x.LeaseId
	}
	return 0
}

func (x *ServerMessage) GetAssignedShards() []string {
	if x != nil {
		return x.AssignedShards
	}
	return nil
}

func (x *ServerMessage) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ServerMessage) GetAction() ShardAssignmentAction {
	if x != nil {
		return x.Action
	}
	return ShardAssignmentAction_ASSIGN
}

func (x *ServerMessage) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ServerMessage) GetSourceInstanceId() string {
	if x != nil {
		return x.SourceInstanceId
	}
	return ""
}

func (x *ServerMessage) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServerMessage) GetIsReconciliation() bool {
	if x != nil {
		return x.IsReconciliation
	}
	return false
}

// Keep these for backward compatibility or reference
type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string            `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Capacity   int32             `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Metadata   map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	mi := &file_distributor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_distributor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{2}
}

func (x *InstanceInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceInfo) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *InstanceInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string              `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Status     StatusReport_Status `protobuf:"varint,2,opt,name=status,proto3,enum=sharddistributor.StatusReport_Status" json:"status,omitempty"`
	// Metrics
	CpuUsage          float64            `protobuf:"fixed64,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage       float64            `protobuf:"fixed64,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	ActiveShardCount  int32              `protobuf:"varint,5,opt,name=active_shard_count,json=activeShardCount,proto3" json:"active_shard_count,omitempty"`
	StandbyShardCount int32              `protobuf:"varint,6,opt,name=standby_shard_count,json=standbyShardCount,proto3" json:"standby_shard_count,omitempty"`
	CustomMetrics     map[string]float64 `protobuf:"bytes,7,rep,name=custom_metrics,json=customMetrics,proto3" json:"custom_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *StatusReport) Reset() {
	*x = StatusReport{}
	mi := &file_distributor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport) ProtoMessage() {}

func (x *StatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_distributor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport.ProtoReflect.Descriptor instead.
func (*StatusReport) Descriptor() ([]byte, []int) {
	return file_distributor_proto_rawDescGZIP(), []int{3}
}

func (x *StatusReport) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StatusReport) GetStatus() StatusReport_Status {
	if x != nil {
		return x.Status
	}
	return StatusReport_ACTIVE
}

func (x *StatusReport) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *StatusReport) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *StatusReport) GetActiveShardCount() int32 {
	if x != nil {
		return x.ActiveShardCount
	}
	return 0
}

func (x *StatusReport) GetStandbyShardCount() int32 {
	if x != nil {
		return x.StandbyShardCount
	}
	return 0
}

func (x *StatusReport) GetCustomMetrics() map[string]float64 {
	if x != nil {
		return x.CustomMetrics
	}
	return nil
}

var File_distributor_proto protoreflect.FileDescriptor

var file_distributor_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x22, 0xf4, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x22, 0xb2, 0x04, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10,
	0x04, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a,
	0x40, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x41, 0x49, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41,
	0x44, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45,
	0x10, 0x03, 0x32, 0x74, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x76, 0x69, 0x6c, 0x68, 0x61, 0x6d, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x65, 0x74, 0x63, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_distributor_proto_rawDescOnce sync.Once
	file_distributor_proto_rawDescData = file_distributor_proto_rawDesc
)

func file_distributor_proto_rawDescGZIP() []byte {
	file_distributor_proto_rawDescOnce.Do(func() {
		file_distributor_proto_rawDescData = protoimpl.X.CompressGZIP(file_distributor_proto_rawDescData)
	})
	return file_distributor_proto_rawDescData
}

var file_distributor_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_distributor_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_distributor_proto_goTypes = []any{
	(ShardAssignmentAction)(0),     // 0: sharddistributor.ShardAssignmentAction
	(ClientMessage_MessageType)(0), // 1: sharddistributor.ClientMessage.MessageType
	(ServerMessage_MessageType)(0), // 2: sharddistributor.ServerMessage.MessageType
	(StatusReport_Status)(0),       // 3: sharddistributor.StatusReport.Status
	(*ClientMessage)(nil),          // 4: sharddistributor.ClientMessage
	(*ServerMessage)(nil),          // 5: sharddistributor.ServerMessage
	(*InstanceInfo)(nil),           // 6: sharddistributor.InstanceInfo
	(*StatusReport)(nil),           // 7: sharddistributor.StatusReport
	nil,                            // 8: sharddistributor.ClientMessage.MetadataEntry
	nil,                            // 9: sharddistributor.InstanceInfo.MetadataEntry
	nil,                            // 10: sharddistributor.StatusReport.CustomMetricsEntry
}
var file_distributor_proto_depIdxs = []int32{
	1,  // 0: sharddistributor.ClientMessage.type:type_name -> sharddistributor.ClientMessage.MessageType
	6,  // 1: sharddistributor.ClientMessage.instance_info:type_name -> sharddistributor.InstanceInfo
	7,  // 2: sharddistributor.ClientMessage.status:type_name -> sharddistributor.StatusReport
	8,  // 3: sharddistributor.ClientMessage.metadata:type_name -> sharddistributor.ClientMessage.MetadataEntry
	2,  // 4: sharddistributor.ServerMessage.type:type_name -> sharddistributor.ServerMessage.MessageType
	0,  // 5: sharddistributor.ServerMessage.action:type_name -> sharddistributor.ShardAssignmentAction
	9,  // 6: sharddistributor.InstanceInfo.metadata:type_name -> sharddistributor.InstanceInfo.MetadataEntry
	3,  // 7: sharddistributor.StatusReport.status:type_name -> sharddistributor.StatusReport.Status
	10, // 8: sharddistributor.StatusReport.custom_metrics:type_name -> sharddistributor.StatusReport.CustomMetricsEntry
	4,  // 9: sharddistributor.ShardDistributor.ShardDistributorStream:input_type -> sharddistributor.ClientMessage
	5,  // 10: sharddistributor.ShardDistributor.ShardDistributorStream:output_type -> sharddistributor.ServerMessage
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_distributor_proto_init() }
func file_distributor_proto_init() {
	if File_distributor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_distributor_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_distributor_proto_goTypes,
		DependencyIndexes: file_distributor_proto_depIdxs,
		EnumInfos:         file_distributor_proto_enumTypes,
		MessageInfos:      file_distributor_proto_msgTypes,
	}.Build()
	File_distributor_proto = out.File
	file_distributor_proto_rawDesc = nil
	file_distributor_proto_goTypes = nil
	file_distributor_proto_depIdxs = nil
}

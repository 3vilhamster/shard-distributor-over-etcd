// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: distributor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShardDistributor_ShardDistributorStream_FullMethodName = "/sharddistributor.ShardDistributor/ShardDistributorStream"
)

// ShardDistributorClient is the client API for ShardDistributor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShardDistributor service provides fast shard distribution notifications
type ShardDistributorClient interface {
	// ShardDistributorStream provides a bidirectional stream for all communications:
	// - Instance registration and deregistration
	// - Shard assignment watching and heartbeats
	// - Status updates
	ShardDistributorStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
}

type shardDistributorClient struct {
	cc grpc.ClientConnInterface
}

func NewShardDistributorClient(cc grpc.ClientConnInterface) ShardDistributorClient {
	return &shardDistributorClient{cc}
}

func (c *shardDistributorClient) ShardDistributorStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShardDistributor_ServiceDesc.Streams[0], ShardDistributor_ShardDistributorStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShardDistributor_ShardDistributorStreamClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

// ShardDistributorServer is the server API for ShardDistributor service.
// All implementations must embed UnimplementedShardDistributorServer
// for forward compatibility.
//
// ShardDistributor service provides fast shard distribution notifications
type ShardDistributorServer interface {
	// ShardDistributorStream provides a bidirectional stream for all communications:
	// - Instance registration and deregistration
	// - Shard assignment watching and heartbeats
	// - Status updates
	ShardDistributorStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	mustEmbedUnimplementedShardDistributorServer()
}

// UnimplementedShardDistributorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShardDistributorServer struct{}

func (UnimplementedShardDistributorServer) ShardDistributorStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ShardDistributorStream not implemented")
}
func (UnimplementedShardDistributorServer) mustEmbedUnimplementedShardDistributorServer() {}
func (UnimplementedShardDistributorServer) testEmbeddedByValue()                          {}

// UnsafeShardDistributorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardDistributorServer will
// result in compilation errors.
type UnsafeShardDistributorServer interface {
	mustEmbedUnimplementedShardDistributorServer()
}

func RegisterShardDistributorServer(s grpc.ServiceRegistrar, srv ShardDistributorServer) {
	// If the following call pancis, it indicates UnimplementedShardDistributorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShardDistributor_ServiceDesc, srv)
}

func _ShardDistributor_ShardDistributorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShardDistributorServer).ShardDistributorStream(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShardDistributor_ShardDistributorStreamServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

// ShardDistributor_ServiceDesc is the grpc.ServiceDesc for ShardDistributor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardDistributor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sharddistributor.ShardDistributor",
	HandlerType: (*ShardDistributorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShardDistributorStream",
			Handler:       _ShardDistributor_ShardDistributorStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distributor.proto",
}

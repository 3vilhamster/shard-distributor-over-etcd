syntax = "proto3";

package sharddistributor;

option go_package = "github.com/3vilhamster/shard-distributor-over-etcd/proto";

// ShardDistributor service provides fast shard distribution notifications
service ShardDistributor {
  // ShardDistributorStream provides a bidirectional stream for all communications:
  // - Instance registration and deregistration
  // - Shard assignment watching and heartbeats
  // - Status updates
  rpc ShardDistributorStream(stream ClientMessage) returns (stream ServerMessage) {}
}

// ClientMessage encapsulates all possible messages from client to server
message ClientMessage {
  string instance_id = 1;

  enum MessageType {
    REGISTER = 0;       // Register instance
    DEREGISTER = 1;     // Deregister instance
    WATCH = 2;          // Start watching for shard assignments
    HEARTBEAT = 3;      // Heartbeat ping
    ACK = 4;            // Acknowledge assignment
    STATUS_REPORT = 5;  // Report instance status
  }
  MessageType type = 2;

  // Fields based on message type
  InstanceInfo instance_info = 3;         // For REGISTER
  StatusReport status = 4;                // For STATUS_REPORT
  string shard_id = 5;                    // For ACK
  map<string, string> metadata = 6;       // Additional metadata
}

// ServerMessage encapsulates all possible messages from server to client
message ServerMessage {
  enum MessageType {
    REGISTER_RESPONSE = 0;    // Response to registration
    DEREGISTER_RESPONSE = 1;  // Response to deregistration
    SHARD_ASSIGNMENT = 2;     // Shard assignment/revocation
    STATUS_RESPONSE = 3;      // Response to status report
    HEARTBEAT_ACK = 4;        // Acknowledge heartbeat
  }
  MessageType type = 2;

  // Fields for REGISTER_RESPONSE
  bool success = 3;
  string message = 4;
  int64 lease_id = 5;
  repeated string assigned_shards = 6;

  // Fields for SHARD_ASSIGNMENT
  string shard_id = 7;
  ShardAssignmentAction action = 8;
  int32 priority = 9;
  string source_instance_id = 10;
  int64 version = 11;
  bool is_reconciliation = 12;
}

enum ShardAssignmentAction {
  ASSIGN = 0;    // Assign shard to instance
  PREPARE = 1;   // Prepare instance for fast activation
  REVOKE = 2;    // Revoke shard from instance
  RECONCILE = 3; // Reconciliation action
}

// Keep these for backward compatibility or reference
message InstanceInfo {
  string instance_id = 1;
}

message StatusReport {
  string instance_id = 1;
  enum Status {
    ACTIVE = 0;
    DRAINING = 1;
    OVERLOADED = 2;
  }
  Status status = 2;

  // Metrics
  double cpu_usage = 3;
  double memory_usage = 4;
  int32 active_shard_count = 5;
  int32 standby_shard_count = 6;
  map<string, double> custom_metrics = 7;
}
